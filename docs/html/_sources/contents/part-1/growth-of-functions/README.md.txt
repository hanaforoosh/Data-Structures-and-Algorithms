# رشد توابع

اگر چه هنوز الگوریتم را به شکل رسمی تعریف نکرده‌ایم اما تصور کنید هر دنباله‌ای از دستورالعمل‌های ساده که کاری انجام دهد را الگوریتم بنامیم. با این تعریف، دستور طبخ یک غذا یا برنامه‌ای که اعداد کوچکتر از ۱۰۰ را روی صفحه نمایش چاپ می‌کند را می‌توان الگوریتم نامید. بیایید به مثال برنامه کامپیوتری بپردازیم. شما این برنامه را چگونه پیاده‌سازی می‌کنید؟ یک پیاده‌سازی به زبان سطح بالای پایتون می‌تواند مطابق ذیل باشد.

``` python
   for i in range(1,101):
       print(i)
```

اگر بخواهیم برنامه‌ای بنویسیم که اعداد ۱ تا n را چاپ کند چطور؟ تابع زیر این کار را انجام می‌دهد.

``` python
   def print_nums(n):
       for i in range(1,n+1):
           print(i)
```

در حقیقت، ما توانستیم الگوریتمی ارائه دهیم که اعداد ۱ تا n را روی صفحه چاپ کند.
فرض کنید که ما هر دو کد را روی یک سیستم یکسان اجرا می‌کنیم. ما در مورد زمانی که طول می‌کشد یک دستور ساده (مانند جمع یا انتساب) در این سیستم اجرا شود اطلاعی نداریم. اما می‌دانیم که اگر دستور جمع به اندازه ``$` t_{جمع} `$`` طول بکشد، با تکرار اجرای الگوریتم زمان اجرای دستور جمع تغییر نخواهد کرد.
با این فرض می‌توانیم زمان اجرای کد اول را محاسبه کنیم:

``` math
   T_{اولی} = t_{انتساب} + 99 \times ( t_{انتساب} + t_{جمع})
```

حالا اگر بخواهیم در مورد زمان اجرای کد دوم اظهار نظر کنیم چه می‌توانیم بگوییم؟

``` math
   T_{دومی}{(n)} = t_{انتساب} + (n-1) \times ( t_{انتساب} + t_{جمع})
```

نکته حائز اهمیت در اینجا این است که زمان اجرای کد دوم بر خلاف کد اول، مقدار ثابتی ندارد و **تابعی** از ورودی است. به شکل دقیق‌تر، تابعی از **اندازه** ورودی است. اما چنین موضوعی چه اهمیتی برای ما، به عنوان طراحان الگوریتم دارد؟

در دنیای کامپیوتر (و شاید تمام جهان!) **فضا** و **زمان** مهم‌ترین ارکان هستند. در طراحی الگوریتم‌ها، می‌کوشیم حتی‌المقدور الگوریتمی را ارائه کنیم که زمان اجرای آن کوتاه و فضای مصرفی آن اندک باشد. به همین دلیل لازم است که به نحوی در مورد فضا و زمان یک الگوریتم اظهار نظر کنیم و بتوانیم دو الگوریتم مختلف که برای یک مسأله ارائه شدند را بسنجیم و با هم مقایسه کنیم. در این بخش، زمان الگوریتم‌ها را مورد بررسی قرار می‌دیم و در بخش‌های بعدی روشی عمومی را معرفی می‌کنیم که با کمک آن هم بتوان زمان و هم فضا را با یکدیگر مقایسه نمود.

برگردیم به کدها. اگر بخواهیم زمان اجرای دو کد گفته شده را با یکدیگر مقایسه کنیم، می‌توانیم به این شکل تحلیل کنیم که اگر **اندازه ورودی** در کد دوم، کمتر از ۱۰۰ باشد، آنگاه سرعت کد دوم بیشتر است و زمان اجرای کمتری دارد. اگر **اندازه ورودی** در کد دوم برابر با ۱۰۰ باشد، زمان‌های اجرا یکسان هستند و اگر **اندازه ورودی** در کد دوم بیش از ۱۰۰ باشد، زمان اجرای کد دوم بیشتر از کد اول خواهد بود.

| اندازه ورودی | کد سریع‌تر |
| ------------ | --------- |
| کمتر از ۱۰۰  | کد دوم    |
| ۱۰۰          | برابر     |
| بیش از ۱۰۰   | کد اول    |

اگر بخواهیم به‌طور کلی صحبت کنیم، آیا کد دوم سریعتر از کد اول است یا کندتر از آن؟ آیا راهی وجود دارد که بتوانیم یک نظر کلی دهیم؟ یعنی در مقایسه دو کد (یا الگوریتم) بتوان با قاطعیت گفت که یا زمان اجرای برابری دارند یا زمان یکی از دیگری بیشتر است.
پاسخ **مثبت** است. در واقع برای مقایسه زمان اجرای دو الگوریتم، لازم است که توابع زمان‌های اجراهای دو الگوریتم را با یکدیگر مقایسه کنیم. یعنی اگر بتوانیم یک روش قیاس برای توابع ارائه دهیم، آنگاه مقایسه زمان اجرای دو الگوریتم (و فضای مصرفی آن‌ها) کار دشواری نخواهد بود.
قبل از این که به شرح روش مقایسه بپردازیم توجه به یک نکته بسیار ضروری است.

``` important:: در تحلیل الگوریتم‌ها، همواره به ورودی‌های بسیار بسیار بزرگ(!) می‌اندیشیم. برای مقایسه توابع زمان اجرای دو الگوریتم (یا مقایسه جمله‌های تابع زمان اجرای یک الگوریتم) این نکته را مد نظر قرار می‌دهیم که برای ورودی‌های بسیار بسیار بزرگ (بی‌نهایت) آن‌ها را مقایسه می‌کنیم. **چرا؟**
باید بنویسم دلیلشو
```
