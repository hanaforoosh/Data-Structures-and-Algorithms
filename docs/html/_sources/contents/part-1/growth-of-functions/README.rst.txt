++++++++++
رشد توابع
++++++++++

اگر چه هنوز الگوریتم را به شکل رسمی تعریف نکرده‌ایم اما تصور کنید هر دنباله‌ای از دستورالعمل‌های ساده که کاری انجام دهد را الگوریتم بنامیم. با این تعریف، دستور طبخ یک غذا یا برنامه‌ای که اعداد کوچکتر از ۱۰۰ را روی صفحه نمایش چاپ می‌کند را می‌توان الگوریتم نامید. بیایید به مثال برنامه کامپیوتری بپردازیم. شما این برنامه را چگونه پیاده‌سازی می‌کنید؟ یک پیاده‌سازی به زبان سطح بالای پایتون می‌تواند مطابق ذیل باشد.

.. code-block::

   for i in range(1,101):
       print(i)


اگر بخواهیم برنامه‌ای بنویسیم که اعداد ۱ تا n را چاپ کند چطور؟ تابع زیر این کار را انجام می‌دهد.

.. code-block::

   def print_nums(n):
       for i in range(1,n+1):
           print(i)
 

در حقیقت، ما توانستیم الگوریتمی ارائه دهیم که اعداد ۱ تا n را روی صفحه چاپ کند.
فرض کنید که ما هر دو کد را روی یک سیستم یکسان اجرا می‌کنیم. ما در مورد زمانی که طول می‌کشد یک دستور ساده (مانند جمع یا انتساب) در این سیستم اجرا شود اطلاعی نداریم. اما می‌دانیم که اگر دستور جمع به اندازه :math:`t_{sum}` طول بکشد، با تکرار اجرای الگوریتم زمان اجرای دستور جمع تغییر نخواهد کرد.
با این فرض می‌توانیم زمان اجرای کد اول را محاسبه کنیم:

.. math::
   :label: pfx

   T_{first} = t_{assignment} + 99 \times ( t_{assignment} + t_{sum})

test in English :math:`a` how it